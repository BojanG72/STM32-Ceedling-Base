---

# Notes:
# This example project is setup to build release binaries for an ARM cortex M4 processor

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.1
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

:release_build:
 :output: stmBase
 :use_assembly: TRUE
 :artifacts:
    - stmBase.map

:environment:

:extension:
  :executable: .elf

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
    - lib/**
    - startup/**
  :include:

  :release_toolchain_include:
    - lib/CMSIS/Device/ST/STM32L4xx/Include/**
    - lib/CMSIS/Include/**
    - lib/STM32L4xx_HAL_Driver/Inc/**
    - lib/STM32L4xx_HAL_Driver/Inc/Legacy/**
    - src/bsp/
  :support:
    - test/support

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90

:tools:
  :release_compiler:
    :executable: arm-none-eabi-gcc             #exists in system search path
    :arguments:
      - ${1}
      - -DTARGET
      - -mcpu=cortex-m4
      - -mthumb
      - -mfpu=fpv4-sp-d16 
      - -mfloat-abi=hard
      - -g
      - -Isrc/
      - -I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE 
      - -Wall
      - -Os
      - -c
      - -o ${2}
  :release_linker:
    :executable: arm-none-eabi-gcc
    :arguments:
      - ${1}
      - -DTARGET
      - -Isrc/
      - -I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE 
      - -mcpu=cortex-m4
      - -mthumb
      - -mfpu=fpv4-sp-d16 
      - -mfloat-abi=hard
      - -g
      - -T"startup/STM32L496AGIX_FLASH.ld"
      - --specs=nosys.specs
      - -o ${2}.elf
  :release_assembler:
    :executable: arm-none-eabi-gcc
    :arguments:
      - ${1}
      - -DTARGET
      - -I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE 
      - -mcpu=cortex-m4
      - -mthumb
      - -mfpu=fpv4-sp-d16 
      - -mfloat-abi=hard
      - -Wl,-Map="stmBase.map"
      - -g
      - -Wall
      - -Os
      - -c
      - -o ${2}

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
...
